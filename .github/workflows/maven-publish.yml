name: Maven Publish

on:
  workflow_dispatch:

jobs:
  maven-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN_GITHUB_FOR_GITHUB_ACTION }}

      - name: üïµÔ∏è‚Äç‚ôÇÔ∏è Check current branch
        id: current_branch
        run: |
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch is $BRANCH"
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          [[ "$BRANCH" == "main" ]] && exit 0 || exit 1

      - name: üîç Extract current version from pom.xml
        id: extract_version
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          release_version="${version%-SNAPSHOT}"
          echo "release_version=$release_version" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "üì¶ Current version: $version"
          echo "üîñ Release version: $release_version"

      - name: üöß Set release version in pom.xml (remove -SNAPSHOT)
        run: |
          mvn versions:set -DnewVersion=${{ steps.extract_version.outputs.release_version }}
          mvn versions:commit

      - name: üîñ Commit release version
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add pom.xml
          git commit -m "üîñ Release version ${{ steps.extract_version.outputs.release_version }}"

      - name: üîÑ Pull latest changes (rebase) before push
        run: |
          git pull --rebase origin ${{ steps.current_branch.outputs.branch }}

      - name: ‚¨ÜÔ∏è Push release version
        run: |
          git push origin HEAD:${{ steps.current_branch.outputs.branch }}

      - name: üöÄ Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract_version.outputs.release_version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB_FOR_GITHUB_ACTION }}

      - name: ‚òï Set up Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: temurin
          server-id: central
          server-username: ${{ secrets.OSSRH_USERNAME }}
          server-password: ${{ secrets.OSSRH_TOKEN }}
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: üîê Import and validate GPG key
        run: |
          echo "${{ secrets.MAVEN_GPG_PRIVATE_KEY }}" | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
          echo "Test message" > test.txt
          KEYID=$(gpg --list-secret-keys --with-colons | grep '^sec' | cut -d: -f5 | head -n1)
          gpg --batch --yes --pinentry-mode loopback \
            --passphrase "${{ secrets.MAVEN_GPG_PASSPHRASE }}" \
            -u "$KEYID" -s test.txt
          echo "‚úÖ GPG signing test passed."

      - name: üõ† Create temporary settings.xml with OSSRH credentials
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
          <servers>
            <server>
              <id>central</id>
              <username>${MAVEN_USERNAME}</username>
              <password>${MAVEN_PASSWORD}</password>
            </server>
          </servers>
          </settings>
          EOF

      - name: üß™ Deploy to OSSRH via Maven Central
        env:
          MAVEN_OPTS: "--add-opens=java.base/java.util=ALL-UNNAMED"
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        run: |
          GPG_KEY_ID=$(gpg --list-secret-keys --with-colons | grep '^sec' | cut -d: -f5 | head -n1)

          if [ -z "$GPG_KEY_ID" ]; then
            echo "‚ùå Aucune cl√© GPG trouv√©e, ou cl√© non import√©e correctement."
            exit 1
          fi

          echo "‚úÖ Cl√© GPG trouv√©e : $GPG_KEY_ID"

          mvn deploy -DskipTests \
            -PtoOSSRH \
            -Dgpg.keyname=$GPG_KEY_ID \
            -Dgpg.passphrase="${MAVEN_GPG_PASSPHRASE}" \
            -Dgpg.executable=gpg \
            -Dgpg.useagent=false

      - name: üî¢ Calculate next snapshot version
        id: versioning
        run: |
          IFS='.' read -r major minor patch <<< "${{ steps.extract_version.outputs.release_version }}"
          next_patch=$((patch + 1))
          next_version="$major.$minor.$next_patch-SNAPSHOT"
          echo "next_version=$next_version" >> $GITHUB_OUTPUT
          echo "üîÆ Next version: $next_version"

      - name: üöß Set next snapshot version in pom.xml
        run: |
          mvn versions:set -DnewVersion=${{ steps.versioning.outputs.next_version }}
          mvn versions:commit

      - name: üíæ Commit next snapshot version
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add pom.xml
          git commit -m "üîÑ Prepare next development iteration: ${{ steps.versioning.outputs.next_version }}"

      - name: üîÑ Pull latest changes (rebase) before push (next snapshot)
        run: |
          git pull --rebase origin ${{ steps.current_branch.outputs.branch }}

      - name: ‚¨ÜÔ∏è Push next snapshot version
        run: |
          git push origin HEAD:${{ steps.current_branch.outputs.branch }}

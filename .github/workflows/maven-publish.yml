name: Maven Publish

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'Version de la release (semver)'
        required: true
        default: 'x.x.x'

jobs:
  maven-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Pour créer une release
      packages: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN_GITHUB_FOR_GITHUB_ACTION }}

      - name: Verify branch is main or master
        run: |
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          [[ "$BRANCH" == "main" || "$BRANCH" == "updateMavenCentralPublishing" ]] && exit 0 || exit 1

      - name: Validate semver version
        run: echo "${{ github.event.inputs.releaseVersion }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'

      - name: Ensure tag doesn’t already exist
        run: |
          TAG="${{ github.event.inputs.releaseVersion }}"
          [[ "$(git tag --list "$TAG")" == "" ]] && exit 0 || exit 1

      - name: Prepare release (set version + create tag)
        env:
          NEW_TAG: ${{ github.event.inputs.releaseVersion }}
        run: |
          git config --global user.email "github-action@noreply"
          git config --global user.name "GitHub Action"
          mvn release:prepare -B -DreleaseVersion=$NEW_TAG -DtagNameFormat="@{project.version}" -Darguments=-DskipTests
          git switch develop
          git merge $(git rev-parse --abbrev-ref @{u})
          git push

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.releaseVersion }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB_FOR_GITHUB_ACTION }}

      - name: Set up Java and Maven Central credentials
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          server-id: ossrh
          server-username: OSSRH_USERNAME
          server-password: OSSRH_TOKEN
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Import GPG key
        run: |
          echo "${{ secrets.MAVEN_GPG_PRIVATE_KEY }}" | gpg --batch --import
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo RELOADAGENT | gpg-connect-agent
          export GPG_TTY=$(tty)

      - name: Deploy to Maven Central
        run: |
          export GPG_TTY=$(tty)
          mvn release:perform -B -Darguments="-Dgpg.passphrase=${{ secrets.MAVEN_GPG_PASSPHRASE }} -DskipTests"
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
